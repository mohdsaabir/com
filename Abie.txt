#include <stdio.h>
#define MAX 20

int nStates, nAlpha, nTrans;
char alpha[MAX];
int trans[MAX][MAX][MAX];   // trans[from][symbolIndex][k] = to
int transCount[MAX][MAX];   // number of transitions per symbol

// --- Function to find index of symbol ---
int getAlphaIndex(char c) {
    for (int i = 0; i < nAlpha; i++)
        if (alpha[i] == c)
            return i;
    return -1;
}

// --- Core epsilon closure logic (iterative DFS using stack) ---
void epsilonClosure(int start, int closure[], int epsIndex) {
    int stack[MAX], top = 0;
    stack[top++] = start;
    closure[start] = 1;

    while (top) {
        int s = stack[--top];
        for (int i = 0; i < transCount[s][epsIndex]; i++) {
            int next = trans[s][epsIndex][i];
            if (!closure[next]) {
                closure[next] = 1;
                stack[top++] = next;
            }
        }
    }
}

// --- Main function ---
int main() {
    printf("Enter number of alphabets: ");
    scanf("%d", &nAlpha);
    getchar();

    printf("Enter alphabets (use 'e' for epsilon if needed): ");
    for (int i = 0; i < nAlpha; i++) {
        scanf(" %c", &alpha[i]);
    }

    printf("Enter number of states: ");
    scanf("%d", &nStates);

    printf("Enter number of transitions: ");
    scanf("%d", &nTrans);

    printf("Enter transitions (from symbol to):\n");
    printf("Example: 0 e 1  means q0 --e--> q1\n\n");

    for (int i = 0; i < nTrans; i++) {
        int from, to;
        char sym;
        scanf("%d %c %d", &from, &sym, &to);
        int idx = getAlphaIndex(sym);
        if (idx == -1) continue;
        trans[from][idx][transCount[from][idx]++] = to;
    }

    // Find epsilon symbol index (if any)
    int epsIndex = -1;
    for (int i = 0; i < nAlpha; i++)
        if (alpha[i] == 'e')
            epsIndex = i;

    printf("\n--- E-closures ---\n");
    for (int s = 0; s < nStates; s++) {
        int closure[MAX] = {0};

        if (epsIndex != -1)
            epsilonClosure(s, closure, epsIndex);
        else
            closure[s] = 1;

        printf("Îµ-closure(q%d): { ", s);
        for (int i = 0; i < nStates; i++)
            if (closure[i])
                printf("q%d ", i);
        printf("}\n");
    }

    return 0;
}